name: Deploy terraform remote backend

on:
  # push:
  #   branches: ["main", "dev"]
  workflow_dispatch:  # running manually
    inputs:
      ycloud_region:
        default: ru-central1
        description: YCloud region
        type: choice
        required: true
        options:
        - ru-central1
      terraform_folder:
        default: deploy
        description: Path to a Terraform configs folder
        type: string
        required: true
      dynamodb_table_name:
        default: lock
        description: Таблица для хранения состояния
        type: string
        required: true
      environment:
        default: testing
        description: YCloud Environment
        type: environment
        required: true

jobs:

  # Раскатываю terraform'ом инфраструктуру
  terraform-init:
    name: Terraform apply
    runs-on: ubuntu-latest

    # outputs:
    #   document-api-endpoint: ${{ steps.terraform-outputs.outputs.document-api-endpoint }}
    #   bucket-name: ${{ steps.terraform-outputs.outputs.bucket-name }}
    #   access-key: ${{ steps.terraform-outputs.outputs.access-key }}
    #   secret-key: ${{ steps.terraform-outputs.outputs.secret-key }}

    defaults:
      run:
        shell: bash

    env:
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
      BASE_DIR: ${{ inputs.terraform_folder }}
      TF_VAR_environment: ${{ inputs.environment }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform apply
      run: |
        terraform -chdir=${{ env.BASE_DIR }} init
        terraform -chdir=${{ env.BASE_DIR }} plan -input=false
        terraform -chdir=${{ env.BASE_DIR }} apply -auto-approve -input=false

    - name: Terraform outputs
      id: terraform-outputs
      run: |
        dynamodb_api_endpoint=$(terraform -chdir=${{ env.BASE_DIR }} output -raw document-api-endpoint)

        s3_storage_tfstate=$(terraform -chdir=${{ env.BASE_DIR }} output -json storage-tfstate)

        bucket_name=$(echo $s3_storage_tfstate | jq -r '.bucket')
        # access_key=$(echo $s3_storage_tfstate | jq -r '.access_key' | gpg --symmetric --batch --quiet --cipher-algo AES256 --passphrase ${{ secrets.SECRET_PASSPHRASE }} | base64 -w 0)
        # secret_key=$(echo $s3_storage_tfstate | jq -r '.secret_key' | gpg --symmetric --batch --quiet --cipher-algo AES256 --passphrase ${{ secrets.SECRET_PASSPHRASE }} | base64 -w 0)

        access_key=$(echo $s3_storage_tfstate | jq -r '.access_key')
        secret_key=$(echo $s3_storage_tfstate | jq -r '.secret_key')

        echo "document-api-endpoint=$dynamodb_api_endpoint" >> $GITHUB_OUTPUT
        echo "bucket-name=$bucket_name" >> $GITHUB_OUTPUT
        echo "access-key=$access_key" >> $GITHUB_OUTPUT
        echo "secret-key=$secret_key" >> $GITHUB_OUTPUT
    
    - name: Save to Github variables
      uses: asman-go/update-secret-action@v0.1
      with:
        key: DYNAMODB_API_ENDPOINT
        value: ${{ steps.terraform-outputs.outputs.document-api-endpoint }}
        token: ${{ secrets.PAT_GITHUB_TOKEN }}
        level: organization
        type: variable
        visibility: all
    
    - name: Save to Github variables
      uses: asman-go/update-secret-action@v0.1
      with:
        key: BUCKET_NAME
        value: ${{ steps.terraform-outputs.outputs.bucket-name }}
        token: ${{ secrets.PAT_GITHUB_TOKEN }}
        level: organization
        type: variable
        visibility: all

    - name: Save to Github variables
      uses: asman-go/update-secret-action@v0.1
      with:
        key: AWS_ACCESS_KEY
        value: ${{ steps.terraform-outputs.outputs.access-key }}
        token: ${{ secrets.PAT_GITHUB_TOKEN }}
        level: organization
        type: variable
        visibility: all

    - name: Save to Github credentials
      uses: asman-go/update-secret-action@v0.1
      with:
        key: AWS_SECRET_KEY
        value: ${{ steps.terraform-outputs.outputs.secret-key }}
        token: ${{ secrets.PAT_GITHUB_TOKEN }}
        level: organization
        visibility: all


  # Создаю таблицу для хранения состояния
  dynamodb-init:
    name: Create table into DynamoDB
    runs-on: ubuntu-latest
    needs: terraform-init

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # install the python version needed

    - name: Install python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt

    - name: execute py script # run main.py
      run: | 
        # python scripts/dynamodb_init.py \
        #   -a $(\
        #     echo -n '${{ needs.terraform-init.outputs.access-key }}' | \
        #     base64 -d | \
        #     gpg --decrypt --quiet --batch --passphrase ${{ secrets.SECRET_PASSPHRASE }} --output - \
        #   ) \
        #   -s $(\
        #     echo -n '${{ needs.terraform-init.outputs.secret-key }}' | \
        #     base64 -d | \
        #     gpg --decrypt --quiet --batch --passphrase ${{ secrets.SECRET_PASSPHRASE }} --output - \
        #   )
        python scripts/dynamodb_init.py \
          -a '${{ vars.AWS_ACCESS_KEY }}' \
          -s '${{ secrets.AWS_SECRET_KEY }}'
      env:
        TABLE_NAME: ${{ inputs.dynamodb_table_name }}
        DOCUMENT_API_ENDPOINT: ${{ vars.DYNAMODB_API_ENDPOINT }}
        REGION_NAME: ${{ inputs.ycloud_region }}

  save-secret:
    name: test
    uses: asman-go/github-cicd/.github/workflows/update_repo_secret_test.yml@main
    needs:
      - dynamodb-init
      - terraform-init
    with:
      secret_key: TEST_DOCUMENT_API_ENDPOINT
      secret_value: ${{ needs.terraform-init.outputs.document-api-endpoint }}
      level: repository
    secrets: inherit

